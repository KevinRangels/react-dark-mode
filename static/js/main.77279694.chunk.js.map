{"version":3,"sources":["header.js","card.js","top-cards-list.js","switch.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Card","id","username","followers","icon","name","cardClass","src","alt","cardListData","TopCardList","map","cardData","key","Switch","setDarkMode","checked","setChecked","ref","useRef","type","onChange","event","current","htmlFor","App","useState","darkMode","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gUAkBeA,G,YAhBA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,6BACE,sDACA,uBAAGA,UAAU,gBAAb,6BAEDD,OCYIE,G,MApBF,SAAC,GAA0C,EAAzCC,GAA0C,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACpCC,EAAS,eAAWD,GAC5B,OACE,6BAASN,UAAWO,GAClB,uBAAGP,UAAU,cACX,yBAAKQ,IAAKH,EAAMI,IAAI,KACnBN,GAEH,uBAAGH,UAAU,kBACX,0BAAMA,UAAU,yBAAyBI,GACzC,0BAAMJ,UAAU,wBAAhB,cAEF,uBAAGA,UAAU,cACX,yBAAKQ,IAAI,qBAAqBC,IAAI,KADpC,eCZAC,EAAe,CACjB,CACIR,GAAI,EACJC,SAAU,gBACVC,UAAW,MACXC,KAAM,0BACNC,KAAM,WAEV,CACIJ,GAAI,EACJC,SAAU,gBACVC,UAAW,MACXC,KAAM,4BACNC,KAAM,aAEV,CACIJ,GAAI,EACJC,SAAU,gBACVC,UAAW,MACXC,KAAM,0BACNC,KAAM,WAEV,CACIJ,GAAI,EACJC,SAAU,gBACVC,UAAW,MACXC,KAAM,2BACNC,KAAM,aA6DCK,EAzDK,WAClB,OACE,6BAASX,UAAU,aACjB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QAEPU,EAAaE,KAAI,SAACC,GAAD,OAAc,kBAAC,EAAD,eAAMC,IAAKD,EAASX,IAAQW,WCtB5DE,G,MAfA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAC7BC,EAAMC,iBAAO,MAKnB,OACI,yBAAKpB,UAAU,aACX,uBAAGA,UAAU,mBAAb,aACA,2BAAOmB,IAAKA,EAAKE,KAAK,WAAWJ,QAASA,EAASjB,UAAU,WAAWE,GAAG,WAAWoB,SAP9F,SAAsBC,GAClBL,EAAWC,EAAIK,QAAQP,SACvBD,EAAYG,EAAIK,QAAQP,YAMpB,2BAAOjB,UAAU,SAASyB,QAAQ,gBCoB/BC,MA3Bf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACIZ,EADJ,OAEiBW,oBAAS,GAF1B,mBAENV,EAFM,KAEGC,EAFH,KAGPW,EAAYD,EAAW,eAAiB,gBAEhD,SAASE,EAAYC,GACnBb,EAAWa,EAAGC,SACdhB,EAAYe,EAAGC,SAUf,OAPFC,qBAAU,WACR,IAAMF,EAAKG,OAAOC,WAAW,gCAC7BJ,EAAGK,YAAYN,GACfd,EAAYe,EAAGC,SACfd,EAAWa,EAAGC,WACb,IAGC,0BAAMhC,UAAW6B,GACf,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQb,YAAaA,EAAaC,QAASA,EAASC,WAAYA,KAElE,kBAAC,EAAD,QChBcmB,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77279694.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './header.css'\r\nconst Header = ({children}) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header-grid\">\r\n          <div>\r\n            <h1>Social Media Dashboard</h1>\r\n            <p className=\"header-total\">Total Followers: 23, 004</p>\r\n          </div>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./card.css\"\r\n\r\nconst Card = ({id, username, followers, icon, name}) => {\r\n    const cardClass = `card ${name}`\r\n  return (\r\n    <article className={cardClass}>\r\n      <p className=\"card-title\">\r\n        <img src={icon} alt=\"\" />\r\n        {username}\r\n      </p>\r\n      <p className=\"card-followers\">\r\n        <span className=\"card-followers-number\">{followers}</span>\r\n        <span className=\"card-followers-title\">Followers</span>\r\n      </p>\r\n      <p className=\"card-today\">\r\n        <img src=\"images/icon-up.svg\" alt=\"\" />\r\n        12 Today\r\n      </p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card\"\r\n\r\nconst cardListData = [\r\n    {\r\n        id: 1,\r\n        username: '@KevinRangels',\r\n        followers: '107',\r\n        icon: 'images/icon-twitter.svg',\r\n        name: 'twitter'\r\n    },\r\n    {\r\n        id: 2,\r\n        username: '@KevinRangels',\r\n        followers: '107',\r\n        icon: 'images/icon-instagram.svg',\r\n        name: 'instagram'\r\n    },\r\n    {\r\n        id: 3,\r\n        username: '@KevinRangels',\r\n        followers: '107',\r\n        icon: 'images/icon-youtube.svg',\r\n        name: 'youtube'\r\n    },\r\n    {\r\n        id: 4,\r\n        username: '@KevinRangels',\r\n        followers: '107',\r\n        icon: 'images/icon-facebook.svg',\r\n        name: 'facebook'\r\n    }\r\n]\r\n\r\nconst TopCardList = () => {\r\n  return (\r\n    <section className=\"top-cards\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"grid\">\r\n            {\r\n                cardListData.map((cardData) => <Card key={cardData.id} {...cardData}/> )\r\n            }\r\n          \r\n          {/* <article className=\"card twitter\">\r\n            <p className=\"card-title\">\r\n              <img src=\"images/icon-twitter.svg\" alt=\"\" />\r\n              @LeonidasEsteban\r\n            </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">28k</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"images/icon-up.svg\" alt=\"\" />\r\n              12 Today\r\n            </p>\r\n          </article>\r\n          <article className=\"card instagram\">\r\n            <p className=\"card-title\">\r\n              <img src=\"images/icon-instagram.svg\" alt=\"\" />\r\n              @LeonidasEsteban\r\n            </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">6k</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"images/icon-up.svg\" alt=\"\" />\r\n              12 Today\r\n            </p>\r\n          </article>\r\n          <article className=\"card youtube\">\r\n            <p className=\"card-title\">\r\n              <img src=\"images/icon-youtube.svg\" alt=\"\" />\r\n              @LeonidasEsteban\r\n            </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">12k</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"images/icon-up.svg\" alt=\"\" />\r\n              12 Today\r\n            </p>\r\n          </article> */}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TopCardList;\r\n","import React, { useRef } from 'react';\r\nimport './switch.css'\r\n\r\nconst Switch = ({setDarkMode, checked, setChecked}) => {\r\n    const ref = useRef(null)\r\n    function handleChange(event) {\r\n        setChecked(ref.current.checked)\r\n        setDarkMode(ref.current.checked)   \r\n    }\r\n    return ( \r\n        <div className=\"dark-mode\">\r\n            <p className=\"dark-mode-title\">Dark Mode</p>\r\n            <input ref={ref} type=\"checkbox\" checked={checked} className=\"checkbox\" id=\"checkbox\" onChange={handleChange} />\r\n            <label className=\"switch\" htmlFor=\"checkbox\"></label>\r\n          </div>\r\n     );\r\n}\r\n \r\nexport default Switch;","import React, { useState, useEffect } from \"react\";\nimport \"./globals.css\";\nimport Header from './header';\nimport TopCardList from './top-cards-list'\nimport Switch from './switch'\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false)\n  const [checked, setChecked] = useState(false)\n  const mainClass = darkMode ? 'is-dark-mode' : 'is-ligth-mode';\n\nfunction changeMedia(mq) {\n  setChecked(mq.matches);\n  setDarkMode(mq.matches)\n}\n\nuseEffect(() => {\n  const mq = window.matchMedia('(prefers-color-scheme: dark)')\n  mq.addListener(changeMedia)\n  setDarkMode(mq.matches)\n  setChecked(mq.matches);\n}, [])\n\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch setDarkMode={setDarkMode} checked={checked} setChecked={setChecked}/>\n      </Header>\n      <TopCardList />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}